{"ast":null,"code":"import _objectSpread from\"/Users/Shivam/Library/CloudStorage/GoogleDrive-sraval@g.harvard.edu/My Drive/Github/Text-Cluster-Explainer/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _slicedToArray from\"/Users/Shivam/Library/CloudStorage/GoogleDrive-sraval@g.harvard.edu/My Drive/Github/Text-Cluster-Explainer/frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import _toConsumableArray from\"/Users/Shivam/Library/CloudStorage/GoogleDrive-sraval@g.harvard.edu/My Drive/Github/Text-Cluster-Explainer/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import React,{useMemo,useState,useRef,useEffect,useCallback}from\"react\";import*as d3 from\"d3\";import{checkPoints,autocheckPoints,reset,drawToolTip,eraseToolTip}from\"../d3-rendering/projectionManipulationFunctions.js\";import\"../App.css\";import{RightPanel}from\"./RightPanel.js\";import axios from\"axios\";import{drawClouds}from\"../d3-rendering/cloudFunctions.js\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var localDevURL=\"http://127.0.0.1:8000/\";var DEFAULT_PROMPT=\"What is the common theme between the selected sentences?\";// Line element\nvar Line=function Line(_ref){var points=_ref.points,drawing=_ref.drawing;var line=useMemo(function(){return d3.line().x(function(d){return d.x;}).y(function(d){return d.y;});},[]);var dataCopy=points;// console.log(points);\n// Closes loop if done drawing\nif(dataCopy.length>0&&!drawing){dataCopy=[].concat(_toConsumableArray(dataCopy),[points[0]]);}return/*#__PURE__*/_jsx(\"path\",{id:\"lasso\",d:line(dataCopy),style:{stroke:\"blue\",strokeWidth:2,strokeLinejoin:\"round\",strokeLinecap:\"round\",fill:\"rgba(0,100,255,0.05)\"}});};var Explanations=function Explanations(){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),autoClusterLabel=_useState2[0],setautoClusterLabel=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),drawing=_useState4[0],setDrawing=_useState4[1];var _useState5=useState([]),_useState6=_slicedToArray(_useState5,2),selectedPoints=_useState6[0],setSelectedPoints=_useState6[1];var _useState7=useState({positiveWord:null,negativeWord:null}),_useState8=_slicedToArray(_useState7,2),topWords=_useState8[0],setTopWords=_useState8[1];var _useState9=useState(false),_useState10=_slicedToArray(_useState9,2),wordsLoading=_useState10[0],setWordsLoading=_useState10[1];var _useState11=useState(\"\"),_useState12=_slicedToArray(_useState11,2),keyVal=_useState12[0],setKeyVal=_useState12[1];var _useState13=useState(\"\"),_useState14=_slicedToArray(_useState13,2),test_text=_useState14[0],setTestText=_useState14[1];var _useState15=useState(DEFAULT_PROMPT),_useState16=_slicedToArray(_useState15,2),prompt=_useState16[0],setPrompt=_useState16[1];var _useState17=useState(\"Select points to see an explanation\"),_useState18=_slicedToArray(_useState17,2),explanation=_useState18[0],setExplanation=_useState18[1];function getExplanationClusterLabel(){console.log(autoClusterLabel);setDrawing(false);// Check if points are in path on mouseup\nvar _autocheckPoints=autocheckPoints(autoClusterLabel),brushedPoints=_autocheckPoints.brushedPoints,categorizedPoints=_autocheckPoints.categorizedPoints,selectedLabels=_autocheckPoints.selectedLabels;// Send brushed points to right panel\nsetSelectedPoints(brushedPoints);if(brushedPoints.length>0){// Send categorized points to back for linear classification\nsetWordsLoading(true);axios.post(localDevURL+\"categorize-data\",{data:JSON.stringify(categorizedPoints)}).then(function(response){console.log(\"Categorized!\",response.data.data);var newTopWords=drawClouds(response.data.data);setWordsLoading(false);setTopWords(newTopWords);// TODO: do things with response\n}).catch(function(error){console.log(error);});axios.post(localDevURL+\"GPT-explanation\",{apiKey:keyVal,selectedLabels:JSON.stringify([prompt].concat(_toConsumableArray(selectedLabels)))}).then(function(response){console.log(response);setExplanation(response.data);}).catch(function(error){console.log(error);});}}// request new explanation when prompt changes\nuseEffect(function(){console.log(\"KEY:\",keyVal);console.log(\"changedPrompt:\",prompt);var _checkPoints=checkPoints(),brushedPoints=_checkPoints.brushedPoints,categorizedPoints=_checkPoints.categorizedPoints,selectedLabels=_checkPoints.selectedLabels;if(brushedPoints.length>0){axios.post(localDevURL+\"GPT-explanation\",{apiKey:keyVal,selectedLabels:JSON.stringify([prompt].concat(_toConsumableArray(selectedLabels)))}).then(function(response){console.log(response);setExplanation(response.data);}).catch(function(error){console.log(error);});}},[prompt]);};export var MouseDraw=function MouseDraw(_ref2){var x=_ref2.x,y=_ref2.y,width=_ref2.width,height=_ref2.height;// States and state setters\nvar _useState19=useState({points:[]}),_useState20=_slicedToArray(_useState19,2),currentLine=_useState20[0],setCurrentLine=_useState20[1];var drawingAreaRef=useRef();// When the mouse moves, adds the newest point to the list of points for the current line\nvar mouseMove=useCallback(function(event){var _d3$pointer=d3.pointer(event),_d3$pointer2=_slicedToArray(_d3$pointer,2),x=_d3$pointer2[0],y=_d3$pointer2[1];if(drawing){setCurrentLine(function(line){return _objectSpread(_objectSpread({},line),{},{points:[].concat(_toConsumableArray(line.points),[{x:x,y:y}])});});}},[drawing]);// Creates a new line and starts drawing\nfunction enableDrawing(){reset();setCurrentLine({points:[]});setSelectedPoints([]);setDrawing(true);setTopWords({positiveWord:null,negativeWord:null});}// Adds the new line to the array of lines, stops drawing on mouseup\nfunction disableDrawing(){setDrawing(false);// Check if points are in path on mouseup\nvar _checkPoints2=checkPoints(),brushedPoints=_checkPoints2.brushedPoints,categorizedPoints=_checkPoints2.categorizedPoints,selectedLabels=_checkPoints2.selectedLabels;// Send brushed points to right panel\nsetSelectedPoints(brushedPoints);if(brushedPoints.length>0){// Send categorized points to back for linear classification\nsetWordsLoading(true);axios.post(localDevURL+\"categorize-data\",{data:JSON.stringify(categorizedPoints)}).then(function(response){console.log(\"Categorized!\",response.data.data);var newTopWords=drawClouds(response.data.data);setWordsLoading(false);setTopWords(newTopWords);// TODO: do things with response\n}).catch(function(error){console.log(error);});axios.post(localDevURL+\"GPT-explanation\",{apiKey:keyVal,selectedLabels:JSON.stringify([prompt].concat(_toConsumableArray(selectedLabels)))}).then(function(response){console.log(response);setExplanation(response.data);}).catch(function(error){console.log(error);});}}function handleMouseOver(e){if(!drawing&&e.target.tagName.toLowerCase()===\"circle\"){drawToolTip(e.target.id,width);}}function handleMouseOut(e){if(!drawing&&e.target.tagName.toLowerCase()===\"circle\"){eraseToolTip(e.target.id);}}// Called mouseMove on mouseover of the drawing area\nuseEffect(function(){var area=d3.select(drawingAreaRef.current);area.on(\"mousemove\",mouseMove);return function(){return area.on(\"mousemove\",null);};},[mouseMove]);// request new explanation when text changes\nuseEffect(function(){axios.post(localDevURL+\"test-projection\",{text:test_text}).then(function(response){console.log(response);// SVG\nvar svg=d3.select(\"#containerSVG\");svg.append(\"g\").selectAll(\"circle\").data(response.data.data).enter().append(\"circle\").attr(\"r\",50).attr(\"opacity\",1).attr(\"id\",'test-point').attr(\"cx\",function(d){var centerX=x(+d[0]);return centerX;}).attr(\"cy\",function(d){var centerY=y(+d[1]);return centerY;}).attr(\"fill\",\"green\");}).catch(function(error){console.log(error);});},[test_text]);return/*#__PURE__*/_jsxs(\"div\",{className:\"body\",children:[/*#__PURE__*/_jsx(\"svg\",{id:\"containerSVG\",width:width,height:height,onMouseDown:enableDrawing,onMouseUp:disableDrawing,onMouseOver:function onMouseOver(e){handleMouseOver(e);},onMouseOut:function onMouseOut(e){handleMouseOut(e);},children:/*#__PURE__*/_jsxs(\"g\",{ref:drawingAreaRef,children:[/*#__PURE__*/_jsx(\"rect\",{x:0,y:0,width:width,height:height,style:{fill:\"white\"}}),/*#__PURE__*/_jsx(Line,{points:currentLine.points,drawing:drawing})]})}),/*#__PURE__*/_jsx(RightPanel,{selectedPoints:selectedPoints,pathPoints:currentLine.points,topWords:topWords,wordsLoading:wordsLoading,prompt:prompt,setPrompt:setPrompt,explanation:explanation,keyVal:keyVal,setKeyVal:setKeyVal,test_text:test_text,setTestText:setTestText,autoClusterLabel:autoClusterLabel,setautoClusterLabel:setautoClusterLabel,onautoClusterLabelchange:getExplanationClusterLabel})]});};","map":{"version":3,"names":["React","useMemo","useState","useRef","useEffect","useCallback","d3","checkPoints","autocheckPoints","reset","drawToolTip","eraseToolTip","RightPanel","axios","drawClouds","localDevURL","DEFAULT_PROMPT","Line","points","drawing","line","x","d","y","dataCopy","length","stroke","strokeWidth","strokeLinejoin","strokeLinecap","fill","Explanations","autoClusterLabel","setautoClusterLabel","setDrawing","selectedPoints","setSelectedPoints","positiveWord","negativeWord","topWords","setTopWords","wordsLoading","setWordsLoading","keyVal","setKeyVal","test_text","setTestText","prompt","setPrompt","explanation","setExplanation","getExplanationClusterLabel","console","log","brushedPoints","categorizedPoints","selectedLabels","post","data","JSON","stringify","then","response","newTopWords","catch","error","apiKey","MouseDraw","width","height","currentLine","setCurrentLine","drawingAreaRef","mouseMove","event","pointer","enableDrawing","disableDrawing","handleMouseOver","e","target","tagName","toLowerCase","id","handleMouseOut","area","select","current","on","text","svg","append","selectAll","enter","attr","centerX","centerY"],"sources":["/Users/Shivam/Library/CloudStorage/GoogleDrive-sraval@g.harvard.edu/My Drive/Github/Text-Cluster-Explainer/frontend/src/components/MouseDraw.js"],"sourcesContent":["import React, {\n  useMemo,\n  useState,\n  useRef,\n  useEffect,\n  useCallback,\n} from \"react\";\nimport * as d3 from \"d3\";\nimport {\n  checkPoints,\n  autocheckPoints,\n  reset,\n  drawToolTip,\n  eraseToolTip,\n} from \"../d3-rendering/projectionManipulationFunctions.js\";\nimport \"../App.css\";\nimport { RightPanel } from \"./RightPanel.js\";\nimport axios from \"axios\";\nimport { drawClouds } from \"../d3-rendering/cloudFunctions.js\";\n\nconst localDevURL = \"http://127.0.0.1:8000/\";\nconst DEFAULT_PROMPT =\n  \"What is the common theme between the selected sentences?\";\n\n// Line element\nconst Line = ({ points, drawing }) => {\n  const line = useMemo(() => {\n    return d3\n      .line()\n      .x((d) => d.x)\n      .y((d) => d.y);\n  }, []);\n\n  var dataCopy = points;\n  // console.log(points);\n\n  // Closes loop if done drawing\n  if (dataCopy.length > 0 && !drawing) {\n    dataCopy = [...dataCopy, points[0]];\n  }\n\n  return (\n    <path\n      id=\"lasso\"\n      d={line(dataCopy)}\n      style={{\n        stroke: \"blue\",\n        strokeWidth: 2,\n        strokeLinejoin: \"round\",\n        strokeLinecap: \"round\",\n        fill: \"rgba(0,100,255,0.05)\",\n      }}\n    />\n  );\n};\n\n\nconst Explanations = () => {\n  \n  const [autoClusterLabel, setautoClusterLabel] =  useState(false);\n  const [drawing, setDrawing] = useState(false);\n  const [selectedPoints, setSelectedPoints] = useState([]);\n  const [topWords, setTopWords] = useState({\n    positiveWord: null,\n    negativeWord: null,\n  });\n  const [wordsLoading, setWordsLoading] = useState(false);\n  const [keyVal, setKeyVal] = useState(\"\");\n  const [test_text, setTestText] = useState(\"\");\n\n  const [prompt, setPrompt] = useState(DEFAULT_PROMPT);\n  const [explanation, setExplanation] = useState(\n    \"Select points to see an explanation\"\n  );\n\n\n\n  function getExplanationClusterLabel(){\n    console.log(autoClusterLabel)\n    setDrawing(false);\n    // Check if points are in path on mouseup\n    let { brushedPoints, categorizedPoints, selectedLabels } = autocheckPoints(autoClusterLabel);\n\n    // Send brushed points to right panel\n    setSelectedPoints(brushedPoints);\n    \n    if (brushedPoints.length > 0) {\n      // Send categorized points to back for linear classification\n      setWordsLoading(true);\n      axios\n        .post(localDevURL + \"categorize-data\", {\n          data: JSON.stringify(categorizedPoints),\n        })\n        .then((response) => {\n          console.log(\"Categorized!\", response.data.data);\n          let newTopWords = drawClouds(response.data.data);\n          setWordsLoading(false);\n          setTopWords(newTopWords);\n          // TODO: do things with response\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n      axios\n        .post(localDevURL + \"GPT-explanation\", {\n          apiKey: keyVal,\n          selectedLabels: JSON.stringify([prompt, ...selectedLabels]),\n        })\n        .then((response) => {\n          console.log(response)\n          setExplanation(response.data);\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    }\n  }\n\n  // request new explanation when prompt changes\n  useEffect(() => {\n    console.log(\"KEY:\", keyVal);\n    console.log(\"changedPrompt:\", prompt);\n    let { brushedPoints, categorizedPoints, selectedLabels } = checkPoints();\n    if (brushedPoints.length > 0) {\n      axios\n        .post(localDevURL + \"GPT-explanation\", {\n          apiKey: keyVal,\n          selectedLabels: JSON.stringify([prompt, ...selectedLabels]),\n        })\n        .then((response) => {\n          console.log(response);\n          setExplanation(response.data);\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    }\n  }, [prompt]);\n\n\n}\n\n\n\nexport const MouseDraw = ({ x, y, width, height }) => {\n  // States and state setters\n  const [currentLine, setCurrentLine] = useState({ points: [] });\n\n\n\n\n  const drawingAreaRef = useRef();\n\n  // When the mouse moves, adds the newest point to the list of points for the current line\n  const mouseMove = useCallback(\n    function (event) {\n      const [x, y] = d3.pointer(event);\n      if (drawing) {\n        setCurrentLine((line) => ({\n          ...line,\n          points: [...line.points, { x, y }],\n        }));\n      }\n    },\n    [drawing]\n  );\n\n  // Creates a new line and starts drawing\n  function enableDrawing() {\n    reset();\n    setCurrentLine({ points: [] });\n    setSelectedPoints([]);\n    setDrawing(true);\n    setTopWords({ positiveWord: null, negativeWord: null });\n  }\n\n  // Adds the new line to the array of lines, stops drawing on mouseup\n  function disableDrawing() {\n    setDrawing(false);\n    // Check if points are in path on mouseup\n    let { brushedPoints, categorizedPoints, selectedLabels } = checkPoints();\n\n    // Send brushed points to right panel\n    setSelectedPoints(brushedPoints);\n    \n    if (brushedPoints.length > 0) {\n      // Send categorized points to back for linear classification\n      setWordsLoading(true);\n      axios\n        .post(localDevURL + \"categorize-data\", {\n          data: JSON.stringify(categorizedPoints),\n        })\n        .then((response) => {\n          console.log(\"Categorized!\", response.data.data);\n          let newTopWords = drawClouds(response.data.data);\n          setWordsLoading(false);\n          setTopWords(newTopWords);\n          // TODO: do things with response\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n      axios\n        .post(localDevURL + \"GPT-explanation\", {\n          apiKey: keyVal,\n          selectedLabels: JSON.stringify([prompt, ...selectedLabels]),\n        })\n        .then((response) => {\n          console.log(response)\n          setExplanation(response.data);\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    }\n  }\n\n \n \n\n  function handleMouseOver(e) {\n    if (!drawing && e.target.tagName.toLowerCase() === \"circle\") {\n      drawToolTip(e.target.id, width);\n    }\n  }\n\n  function handleMouseOut(e) {\n    if (!drawing && e.target.tagName.toLowerCase() === \"circle\") {\n      eraseToolTip(e.target.id);\n    }\n  }\n\n  // Called mouseMove on mouseover of the drawing area\n  useEffect(() => {\n    const area = d3.select(drawingAreaRef.current);\n    area.on(\"mousemove\", mouseMove);\n    return () => area.on(\"mousemove\", null);\n  }, [mouseMove]);\n\n\n  // request new explanation when text changes\nuseEffect(() => {\n  axios\n    .post(localDevURL + \"test-projection\", {\n      text: test_text,\n    })\n    .then((response) => {\n      console.log(response);\n      // SVG\n      var svg = d3.select(\"#containerSVG\")\n      svg\n        .append(\"g\")\n        .selectAll(\"circle\")\n        .data(response.data.data)\n        .enter()\n        .append(\"circle\")\n        .attr(\"r\", 50)\n        .attr(\"opacity\", 1)\n        .attr(\"id\", 'test-point')\n        .attr(\"cx\", (d) => {\n          let centerX = x(+d[0]);\n          return centerX;\n        })\n        .attr(\"cy\", (d) => {\n          let centerY = y(+d[1]);\n          return centerY;\n        })\n        .attr(\"fill\", \"green\")\n\n    })\n    .catch((error) => {\n      console.log(error);\n    });\n}, [test_text]);\n\n  \n\n  \n\n\n\n  return (\n    <div className=\"body\">\n      <svg\n        id=\"containerSVG\"\n        width={width}\n        height={height}\n        onMouseDown={enableDrawing}\n        onMouseUp={disableDrawing}\n        onMouseOver={(e) => {\n          handleMouseOver(e);\n        }}\n        onMouseOut={(e) => {\n          handleMouseOut(e);\n        }}\n      >\n        <g ref={drawingAreaRef}>\n          {/* Drawing background, gives \"g\" its size */}\n          <rect\n            x={0}\n            y={0}\n            width={width}\n            height={height}\n            style={{ fill: \"white\" }}\n          />\n          {/* Renders lines */}\n          <Line points={currentLine.points} drawing={drawing} />\n        </g>\n      </svg>\n      <RightPanel\n        selectedPoints={selectedPoints}\n        pathPoints={currentLine.points}\n        topWords={topWords}\n        wordsLoading={wordsLoading}\n        prompt={prompt}\n        setPrompt={setPrompt}\n        explanation={explanation}\n        keyVal={keyVal}\n        setKeyVal={setKeyVal}\n        test_text = {test_text }\n        setTestText={setTestText}\n        autoClusterLabel={autoClusterLabel}\n        setautoClusterLabel={setautoClusterLabel}\n        onautoClusterLabelchange = {getExplanationClusterLabel}\n      />\n    </div>\n  );\n};\n"],"mappings":"kmBAAA,MAAOA,MAAK,EACVC,OAAO,CACPC,QAAQ,CACRC,MAAM,CACNC,SAAS,CACTC,WAAW,KACN,OAAO,CACd,MAAO,GAAKC,GAAE,KAAM,IAAI,CACxB,OACEC,WAAW,CACXC,eAAe,CACfC,KAAK,CACLC,WAAW,CACXC,YAAY,KACP,oDAAoD,CAC3D,MAAO,YAAY,CACnB,OAASC,UAAU,KAAQ,iBAAiB,CAC5C,MAAOC,MAAK,KAAM,OAAO,CACzB,OAASC,UAAU,KAAQ,mCAAmC,CAAC,wFAE/D,GAAMC,YAAW,CAAG,wBAAwB,CAC5C,GAAMC,eAAc,CAClB,0DAA0D,CAE5D;AACA,GAAMC,KAAI,CAAG,QAAPA,KAAI,MAA4B,IAAtBC,OAAM,MAANA,MAAM,CAAEC,OAAO,MAAPA,OAAO,CAC7B,GAAMC,KAAI,CAAGnB,OAAO,CAAC,UAAM,CACzB,MAAOK,GAAE,CACNc,IAAI,EAAE,CACNC,CAAC,CAAC,SAACC,CAAC,QAAKA,EAAC,CAACD,CAAC,GAAC,CACbE,CAAC,CAAC,SAACD,CAAC,QAAKA,EAAC,CAACC,CAAC,GAAC,CAClB,CAAC,CAAE,EAAE,CAAC,CAEN,GAAIC,SAAQ,CAAGN,MAAM,CACrB;AAEA;AACA,GAAIM,QAAQ,CAACC,MAAM,CAAG,CAAC,EAAI,CAACN,OAAO,CAAE,CACnCK,QAAQ,8BAAOA,QAAQ,GAAEN,MAAM,CAAC,CAAC,CAAC,EAAC,CACrC,CAEA,mBACE,aACE,EAAE,CAAC,OAAO,CACV,CAAC,CAAEE,IAAI,CAACI,QAAQ,CAAE,CAClB,KAAK,CAAE,CACLE,MAAM,CAAE,MAAM,CACdC,WAAW,CAAE,CAAC,CACdC,cAAc,CAAE,OAAO,CACvBC,aAAa,CAAE,OAAO,CACtBC,IAAI,CAAE,sBACR,CAAE,EACF,CAEN,CAAC,CAGD,GAAMC,aAAY,CAAG,QAAfA,aAAY,EAAS,CAEzB,cAAiD7B,QAAQ,CAAC,KAAK,CAAC,wCAAzD8B,gBAAgB,eAAEC,mBAAmB,eAC5C,eAA8B/B,QAAQ,CAAC,KAAK,CAAC,yCAAtCiB,OAAO,eAAEe,UAAU,eAC1B,eAA4ChC,QAAQ,CAAC,EAAE,CAAC,yCAAjDiC,cAAc,eAAEC,iBAAiB,eACxC,eAAgClC,QAAQ,CAAC,CACvCmC,YAAY,CAAE,IAAI,CAClBC,YAAY,CAAE,IAChB,CAAC,CAAC,yCAHKC,QAAQ,eAAEC,WAAW,eAI5B,eAAwCtC,QAAQ,CAAC,KAAK,CAAC,0CAAhDuC,YAAY,gBAAEC,eAAe,gBACpC,gBAA4BxC,QAAQ,CAAC,EAAE,CAAC,2CAAjCyC,MAAM,gBAAEC,SAAS,gBACxB,gBAAiC1C,QAAQ,CAAC,EAAE,CAAC,2CAAtC2C,SAAS,gBAAEC,WAAW,gBAE7B,gBAA4B5C,QAAQ,CAACc,cAAc,CAAC,2CAA7C+B,MAAM,gBAAEC,SAAS,gBACxB,gBAAsC9C,QAAQ,CAC5C,qCAAqC,CACtC,2CAFM+C,WAAW,gBAAEC,cAAc,gBAMlC,QAASC,2BAA0B,EAAE,CACnCC,OAAO,CAACC,GAAG,CAACrB,gBAAgB,CAAC,CAC7BE,UAAU,CAAC,KAAK,CAAC,CACjB;AACA,qBAA2D1B,eAAe,CAACwB,gBAAgB,CAAC,CAAtFsB,aAAa,kBAAbA,aAAa,CAAEC,iBAAiB,kBAAjBA,iBAAiB,CAAEC,cAAc,kBAAdA,cAAc,CAEtD;AACApB,iBAAiB,CAACkB,aAAa,CAAC,CAEhC,GAAIA,aAAa,CAAC7B,MAAM,CAAG,CAAC,CAAE,CAC5B;AACAiB,eAAe,CAAC,IAAI,CAAC,CACrB7B,KAAK,CACF4C,IAAI,CAAC1C,WAAW,CAAG,iBAAiB,CAAE,CACrC2C,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACL,iBAAiB,CACxC,CAAC,CAAC,CACDM,IAAI,CAAC,SAACC,QAAQ,CAAK,CAClBV,OAAO,CAACC,GAAG,CAAC,cAAc,CAAES,QAAQ,CAACJ,IAAI,CAACA,IAAI,CAAC,CAC/C,GAAIK,YAAW,CAAGjD,UAAU,CAACgD,QAAQ,CAACJ,IAAI,CAACA,IAAI,CAAC,CAChDhB,eAAe,CAAC,KAAK,CAAC,CACtBF,WAAW,CAACuB,WAAW,CAAC,CACxB;AACF,CAAC,CAAC,CACDC,KAAK,CAAC,SAACC,KAAK,CAAK,CAChBb,OAAO,CAACC,GAAG,CAACY,KAAK,CAAC,CACpB,CAAC,CAAC,CACJpD,KAAK,CACF4C,IAAI,CAAC1C,WAAW,CAAG,iBAAiB,CAAE,CACrCmD,MAAM,CAAEvB,MAAM,CACda,cAAc,CAAEG,IAAI,CAACC,SAAS,EAAEb,MAAM,4BAAKS,cAAc,GAC3D,CAAC,CAAC,CACDK,IAAI,CAAC,SAACC,QAAQ,CAAK,CAClBV,OAAO,CAACC,GAAG,CAACS,QAAQ,CAAC,CACrBZ,cAAc,CAACY,QAAQ,CAACJ,IAAI,CAAC,CAC/B,CAAC,CAAC,CACDM,KAAK,CAAC,SAACC,KAAK,CAAK,CAChBb,OAAO,CAACC,GAAG,CAACY,KAAK,CAAC,CACpB,CAAC,CAAC,CACN,CACF,CAEA;AACA7D,SAAS,CAAC,UAAM,CACdgD,OAAO,CAACC,GAAG,CAAC,MAAM,CAAEV,MAAM,CAAC,CAC3BS,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAEN,MAAM,CAAC,CACrC,iBAA2DxC,WAAW,EAAE,CAAlE+C,aAAa,cAAbA,aAAa,CAAEC,iBAAiB,cAAjBA,iBAAiB,CAAEC,cAAc,cAAdA,cAAc,CACtD,GAAIF,aAAa,CAAC7B,MAAM,CAAG,CAAC,CAAE,CAC5BZ,KAAK,CACF4C,IAAI,CAAC1C,WAAW,CAAG,iBAAiB,CAAE,CACrCmD,MAAM,CAAEvB,MAAM,CACda,cAAc,CAAEG,IAAI,CAACC,SAAS,EAAEb,MAAM,4BAAKS,cAAc,GAC3D,CAAC,CAAC,CACDK,IAAI,CAAC,SAACC,QAAQ,CAAK,CAClBV,OAAO,CAACC,GAAG,CAACS,QAAQ,CAAC,CACrBZ,cAAc,CAACY,QAAQ,CAACJ,IAAI,CAAC,CAC/B,CAAC,CAAC,CACDM,KAAK,CAAC,SAACC,KAAK,CAAK,CAChBb,OAAO,CAACC,GAAG,CAACY,KAAK,CAAC,CACpB,CAAC,CAAC,CACN,CACF,CAAC,CAAE,CAAClB,MAAM,CAAC,CAAC,CAGd,CAAC,CAID,MAAO,IAAMoB,UAAS,CAAG,QAAZA,UAAS,OAAgC,IAA1B9C,EAAC,OAADA,CAAC,CAAEE,CAAC,OAADA,CAAC,CAAE6C,KAAK,OAALA,KAAK,CAAEC,MAAM,OAANA,MAAM,CAC7C;AACA,gBAAsCnE,QAAQ,CAAC,CAAEgB,MAAM,CAAE,EAAG,CAAC,CAAC,2CAAvDoD,WAAW,gBAAEC,cAAc,gBAKlC,GAAMC,eAAc,CAAGrE,MAAM,EAAE,CAE/B;AACA,GAAMsE,UAAS,CAAGpE,WAAW,CAC3B,SAAUqE,KAAK,CAAE,CACf,gBAAepE,EAAE,CAACqE,OAAO,CAACD,KAAK,CAAC,4CAAzBrD,CAAC,iBAAEE,CAAC,iBACX,GAAIJ,OAAO,CAAE,CACXoD,cAAc,CAAC,SAACnD,IAAI,wCACfA,IAAI,MACPF,MAAM,8BAAME,IAAI,CAACF,MAAM,GAAE,CAAEG,CAAC,CAADA,CAAC,CAAEE,CAAC,CAADA,CAAE,CAAC,EAAC,IAClC,CAAC,CACL,CACF,CAAC,CACD,CAACJ,OAAO,CAAC,CACV,CAED;AACA,QAASyD,cAAa,EAAG,CACvBnE,KAAK,EAAE,CACP8D,cAAc,CAAC,CAAErD,MAAM,CAAE,EAAG,CAAC,CAAC,CAC9BkB,iBAAiB,CAAC,EAAE,CAAC,CACrBF,UAAU,CAAC,IAAI,CAAC,CAChBM,WAAW,CAAC,CAAEH,YAAY,CAAE,IAAI,CAAEC,YAAY,CAAE,IAAK,CAAC,CAAC,CACzD,CAEA;AACA,QAASuC,eAAc,EAAG,CACxB3C,UAAU,CAAC,KAAK,CAAC,CACjB;AACA,kBAA2D3B,WAAW,EAAE,CAAlE+C,aAAa,eAAbA,aAAa,CAAEC,iBAAiB,eAAjBA,iBAAiB,CAAEC,cAAc,eAAdA,cAAc,CAEtD;AACApB,iBAAiB,CAACkB,aAAa,CAAC,CAEhC,GAAIA,aAAa,CAAC7B,MAAM,CAAG,CAAC,CAAE,CAC5B;AACAiB,eAAe,CAAC,IAAI,CAAC,CACrB7B,KAAK,CACF4C,IAAI,CAAC1C,WAAW,CAAG,iBAAiB,CAAE,CACrC2C,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACL,iBAAiB,CACxC,CAAC,CAAC,CACDM,IAAI,CAAC,SAACC,QAAQ,CAAK,CAClBV,OAAO,CAACC,GAAG,CAAC,cAAc,CAAES,QAAQ,CAACJ,IAAI,CAACA,IAAI,CAAC,CAC/C,GAAIK,YAAW,CAAGjD,UAAU,CAACgD,QAAQ,CAACJ,IAAI,CAACA,IAAI,CAAC,CAChDhB,eAAe,CAAC,KAAK,CAAC,CACtBF,WAAW,CAACuB,WAAW,CAAC,CACxB;AACF,CAAC,CAAC,CACDC,KAAK,CAAC,SAACC,KAAK,CAAK,CAChBb,OAAO,CAACC,GAAG,CAACY,KAAK,CAAC,CACpB,CAAC,CAAC,CACJpD,KAAK,CACF4C,IAAI,CAAC1C,WAAW,CAAG,iBAAiB,CAAE,CACrCmD,MAAM,CAAEvB,MAAM,CACda,cAAc,CAAEG,IAAI,CAACC,SAAS,EAAEb,MAAM,4BAAKS,cAAc,GAC3D,CAAC,CAAC,CACDK,IAAI,CAAC,SAACC,QAAQ,CAAK,CAClBV,OAAO,CAACC,GAAG,CAACS,QAAQ,CAAC,CACrBZ,cAAc,CAACY,QAAQ,CAACJ,IAAI,CAAC,CAC/B,CAAC,CAAC,CACDM,KAAK,CAAC,SAACC,KAAK,CAAK,CAChBb,OAAO,CAACC,GAAG,CAACY,KAAK,CAAC,CACpB,CAAC,CAAC,CACN,CACF,CAKA,QAASa,gBAAe,CAACC,CAAC,CAAE,CAC1B,GAAI,CAAC5D,OAAO,EAAI4D,CAAC,CAACC,MAAM,CAACC,OAAO,CAACC,WAAW,EAAE,GAAK,QAAQ,CAAE,CAC3DxE,WAAW,CAACqE,CAAC,CAACC,MAAM,CAACG,EAAE,CAAEf,KAAK,CAAC,CACjC,CACF,CAEA,QAASgB,eAAc,CAACL,CAAC,CAAE,CACzB,GAAI,CAAC5D,OAAO,EAAI4D,CAAC,CAACC,MAAM,CAACC,OAAO,CAACC,WAAW,EAAE,GAAK,QAAQ,CAAE,CAC3DvE,YAAY,CAACoE,CAAC,CAACC,MAAM,CAACG,EAAE,CAAC,CAC3B,CACF,CAEA;AACA/E,SAAS,CAAC,UAAM,CACd,GAAMiF,KAAI,CAAG/E,EAAE,CAACgF,MAAM,CAACd,cAAc,CAACe,OAAO,CAAC,CAC9CF,IAAI,CAACG,EAAE,CAAC,WAAW,CAAEf,SAAS,CAAC,CAC/B,MAAO,kBAAMY,KAAI,CAACG,EAAE,CAAC,WAAW,CAAE,IAAI,CAAC,GACzC,CAAC,CAAE,CAACf,SAAS,CAAC,CAAC,CAGf;AACFrE,SAAS,CAAC,UAAM,CACdS,KAAK,CACF4C,IAAI,CAAC1C,WAAW,CAAG,iBAAiB,CAAE,CACrC0E,IAAI,CAAE5C,SACR,CAAC,CAAC,CACDgB,IAAI,CAAC,SAACC,QAAQ,CAAK,CAClBV,OAAO,CAACC,GAAG,CAACS,QAAQ,CAAC,CACrB;AACA,GAAI4B,IAAG,CAAGpF,EAAE,CAACgF,MAAM,CAAC,eAAe,CAAC,CACpCI,GAAG,CACAC,MAAM,CAAC,GAAG,CAAC,CACXC,SAAS,CAAC,QAAQ,CAAC,CACnBlC,IAAI,CAACI,QAAQ,CAACJ,IAAI,CAACA,IAAI,CAAC,CACxBmC,KAAK,EAAE,CACPF,MAAM,CAAC,QAAQ,CAAC,CAChBG,IAAI,CAAC,GAAG,CAAE,EAAE,CAAC,CACbA,IAAI,CAAC,SAAS,CAAE,CAAC,CAAC,CAClBA,IAAI,CAAC,IAAI,CAAE,YAAY,CAAC,CACxBA,IAAI,CAAC,IAAI,CAAE,SAACxE,CAAC,CAAK,CACjB,GAAIyE,QAAO,CAAG1E,CAAC,CAAC,CAACC,CAAC,CAAC,CAAC,CAAC,CAAC,CACtB,MAAOyE,QAAO,CAChB,CAAC,CAAC,CACDD,IAAI,CAAC,IAAI,CAAE,SAACxE,CAAC,CAAK,CACjB,GAAI0E,QAAO,CAAGzE,CAAC,CAAC,CAACD,CAAC,CAAC,CAAC,CAAC,CAAC,CACtB,MAAO0E,QAAO,CAChB,CAAC,CAAC,CACDF,IAAI,CAAC,MAAM,CAAE,OAAO,CAAC,CAE1B,CAAC,CAAC,CACD9B,KAAK,CAAC,SAACC,KAAK,CAAK,CAChBb,OAAO,CAACC,GAAG,CAACY,KAAK,CAAC,CACpB,CAAC,CAAC,CACN,CAAC,CAAE,CAACpB,SAAS,CAAC,CAAC,CAQb,mBACE,aAAK,SAAS,CAAC,MAAM,wBACnB,YACE,EAAE,CAAC,cAAc,CACjB,KAAK,CAAEuB,KAAM,CACb,MAAM,CAAEC,MAAO,CACf,WAAW,CAAEO,aAAc,CAC3B,SAAS,CAAEC,cAAe,CAC1B,WAAW,CAAE,qBAACE,CAAC,CAAK,CAClBD,eAAe,CAACC,CAAC,CAAC,CACpB,CAAE,CACF,UAAU,CAAE,oBAACA,CAAC,CAAK,CACjBK,cAAc,CAACL,CAAC,CAAC,CACnB,CAAE,uBAEF,WAAG,GAAG,CAAEP,cAAe,wBAErB,aACE,CAAC,CAAE,CAAE,CACL,CAAC,CAAE,CAAE,CACL,KAAK,CAAEJ,KAAM,CACb,MAAM,CAAEC,MAAO,CACf,KAAK,CAAE,CAAEvC,IAAI,CAAE,OAAQ,CAAE,EACzB,cAEF,KAAC,IAAI,EAAC,MAAM,CAAEwC,WAAW,CAACpD,MAAO,CAAC,OAAO,CAAEC,OAAQ,EAAG,GACpD,EACA,cACN,KAAC,UAAU,EACT,cAAc,CAAEgB,cAAe,CAC/B,UAAU,CAAEmC,WAAW,CAACpD,MAAO,CAC/B,QAAQ,CAAEqB,QAAS,CACnB,YAAY,CAAEE,YAAa,CAC3B,MAAM,CAAEM,MAAO,CACf,SAAS,CAAEC,SAAU,CACrB,WAAW,CAAEC,WAAY,CACzB,MAAM,CAAEN,MAAO,CACf,SAAS,CAAEC,SAAU,CACrB,SAAS,CAAIC,SAAW,CACxB,WAAW,CAAEC,WAAY,CACzB,gBAAgB,CAAEd,gBAAiB,CACnC,mBAAmB,CAAEC,mBAAoB,CACzC,wBAAwB,CAAIkB,0BAA2B,EACvD,GACE,CAEV,CAAC"},"metadata":{},"sourceType":"module"}